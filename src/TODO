! PITA (hacks entfernen/neuschreiben, kompliziert, wenig gewinn),
- Fix/Change,
+ kleines Feature,
* großes, langfristiges Feature,
*** völlig unmöglich,
[] wurde versucht, aber nur kompromiss wurde implementiert oder es hat nicht geklappt
$ sollte behoben sein / works for me (muss getestet werden)

== Sonstiges/Minor ==
+ editor/debug modus: spielzeit läuft nicht ab, untersuchung/platzierung von game objekten
    (+ "level editor" töten)
- weapon cooldown: wenn feuer-taste nichts tut, rauchwolke vom wurm aufsteigen lassen?
! capture-zustand vom mousescroller kommt immer durcheinander, z.b. im spiel während maus gefangen ist, konsole öffnen und game_res starten => ärgs; ausserdem: hilfefenster ("h") und mouse scroller wollen beide capture => was tun? (wenn halt GameFrame.simulate() nicht jeden frame den mouse scroll modus setzen würde...)

== bekannte, lösbare Bugs ==
$ wurm, der im napalm kocht, zeigt animation für unkontrollierten/schnellen fall an (sollte sein: rutsch animation)
- Superschaf fliegt auch 15sec weiter, wenn der Wurm nicht mehr dran ist
- Schwarzes Loch kann ertrinkende Würmer aus dem Wasser saugen; Ideen:
  Würmern erlauben, das Wasser wieder zu verlassen (und Zustand korrigieren)
[- Bohrer/Lötlampe stoßen Würmer nicht weg]
    notdürftig implementiert, muss verbessert werden (mehr impuls, weniger schaden?)
$ Kisten erscheinen manchmal in der Landschaft oder an komischen Stellen
$ wenn von einer waffe nur noch ein schuss übrig ist, wird die feuer-animation nicht mehr gezeigt, weil die spielelogik die waffe verschwinden lässt (lösung: z.B. könnte die spiellogik pollen, wann Sequence.weapon_fire_oneshot zurückgesetzt wird)
  (works for me; verzögerung am ende könnte etwas größer sein)
- feuer animation kann verfrüht durch selektion anderer waffe abgebrochen werden (z.B. axt)
- axt: der schaden am anderem wurm kommt zu früh/ist nicht mit animation synchron
- superrope-feueranimation: seil fängt in er mitte des wurmes an => passt nicht zur wurm-graphik;
  außerdem falsche waffenanimation (haken ist noch in der waffe beim feuern)
- minen nicht korrekt rotiert bei levelstart: einfach in Sprite.activate() die rotation prüfen und explizit setzen
- Konsolen-Katastrophe entfernen (es gibt jetzt 3 Konsolen die alle was anderes machen)

== bekannte, unlösbare Bugs ==
- physik mehr wie wwp (z.b. wenn ein wurm nach unten fällt, bleibt er in wwp im boden stecken, zieht sich raus, und bleibt sitzen, während er in lumbricus wie ein gummiball abprallt)
- gui muss beim laden von savegames wiederhergestellt werden (spiele-einstellungsdialog)
- Projektil fliegt durch wenige Pixel dicke Landschaft, wenn der Wurm beim Feuern direkt davorsteht
! napalm ist sehr langsam, minenagriff nicht => ?
- in broadcast.d, SocketSet allokiert speicher, der der GC überlassen wird (entweder bug report für Tango um eine free() methode hinzuzufügen, oder: blockierender thread?)

== Performance Bugs, "Dinge die nicht so weiter gehen können", etc. ==
- physik-kollisions callback entfernen, insbesondere den statistik-müll ("wer schadet wen wieviel" => z.b. versuchen, einfach den schaden per runde auszuwerten?)
- in Lua wird bei jedem physImpact ("sprite_impact") eine Vector2 table für die normale allokiert (wenn der sprite-typ einen event handler registriert)
- und physik "kollisionsmatrix" vereinfachen (CollisionMap)
- statt speichern des kompletten zustands (für savegames und replays) nur zwischen den runden speichern? (replays würden input aufzeichnen, man könnte den savegame code verwenden statt snapshot.d)
- GUI zeichnet hintergrund bild selbst wenn komplett verdeckt (z.b. während des spiels) (ähnliches problem gibt es mit löschung des hintergrund: z.b. fensterhintergrund sollte nicht gelöscht werden, wenn das spiel das eh tut, vor allem im vollbildmodus; dazu gibt es zur zeit ekligen spezialcode)

== GUI (allgemeine Features) ==
+ richtige GUI listen
+ key bindings editor
*** GUI enthässlichen

== GUI spielspezifisch (Dialoge) ==
* Netzwerk-GUI (Spielerliste, Scores, Chat, Ping/Lag/Warte-auf-Server)
+ Waffenset-Editor (mit Kisten-Waffen)
+ Singleplayer-Spiel-Dialog erweitern (Optionen, mehr Team-Einstellungen, Templates laden/speichern)
[+ Netzwerk-Server-erstell GUI (ähnlich Singleplayer, evtl. verbinden mit s.o.)]
[+ Optionsmenü (Sprache, Video, Sound etc.)]
+ Locale-Tool ("missing id" finden, Locales vergleichen, aktuelle Locale neu laden)
+ im-spiel-dialog, der folgende aktionen anbietet: pause, spiel verlassen, speichern, demo aufnahmen, key bindings verändern, obiges optionsmenü


== Spiellogik/Gameengine ==
* physik: box stacking
  (zusätzliche ideen: bewegende platformen, jump pads, wurmlöcher)
- statt aktive Teams aktive TeamMembers
+ Spiel-Statistiken, insb. Team- und Wurm-bezogene
+ Mehr Powerup-Kisten (Niedrige Schwerkraft etc.)
+ Vergiftete Würmer (nach Atomangriff/Sudden death oder Stinktiertreffer)
*** KI

== Spiel-Anzeige (Grafiken, Präsentation) ==
+ Partikel-Effekt für Explosionen, Wurm-nimmt-Schaden, kleine Explosionen (z.B. Minigun-Einschläge)
+ Partikel, die auf Sprite-Ereignisse reagieren (Kollision, Rutschen, Kontakt mit Wasser etc.)
- mehrere partikel-emitter an verschiedenen stellen erlauben (am besten in Sequence einbauen), statt ein emitter, der in der mitte des objekts emitiert
+ Partikel-Modifikations-Effekte (Explosion, Schwarzes Loch) in Spiel-Engine integrieren
+ Feuer-, Nachlade-, Wegsteckanimationen (kann evtl. in worm.d gehackt werden, statt sequence)
+ Mehr "stub" gpl daten (Fragezeichen ersetzen, z.B. Dummy-Projektile die von der Engine gedreht werden)
*** gpl daten (vollständig)
+ Kamera:
    - grundzustand: den aktiven, kontrollierten wurm fokusieren (kermacode durchsucht team-liste)
    - kameracode setzt einen callback, der jedesmal aufgerufen wird, wenn ein neues sprite erzeugt wird (man kann herausfinden, welches team das sprite "abgeschossen" hat)
    - neue waffen-sprites vom kontrollierten wurm werden sofort fokusiert
      wenn das sprite stirbt, wird der fokus nach kurzer zeit wieder auf einen wurm gesetzt
    - bewegt der user die kamera weg, wird der fokus auf waffen-sprites dauerhaft aufgehoben?
    - sonderbehandlung kisten: fokus beim erscheinen immer sofort setzen
      sobald kiste steht, fokus sofort wieder auf das vorherige objekt zurück
    ...

== Waffen ==
+ Superwaffen (Waage, Briefbomben)
+ Tierwaffen (Maulwurf, Maulwurfsangriff, Stinktier mit vergifteten Würmern)
+ Lokale-Suche-Waffen (Taube, Zauberkugel)
+ Bungee
+ Einfrieren
+ Langbogen (Pfeile werden in die Landschaft eingefügt)
+ Nahkampfwaffen (Drachenball, Firepunch, Kamikaze, Kamikaze-Bomber)

- Napalm verbessern (Ruckeln verhindern, Würmer mehr wegstoßen, vll. etwas "klebriger" machen)
- Molotov-Cocktail brennt über mehrere Züge
- Minenverzögerung sollte zufällig sein
+ Anzahl Projektile über Tasten 1-5 einstellen (Rindviecher)

! Steuerung entrümpeln, unabhängig von Würmern machen (worm.d)


== level generator ==
! generator.d: reduziere komplexität indem "generierte" level nur noch als lexel-array gespeichert werden (statt als gefüllte polygone); verschiebe das laden/speichern von savegames(bzw. netzwerk level) nach level.d; mache strukturen in level.d vllt. serialisierbar (statt manueller lade/speicher code); in generator.d würde nur noch code zum rendern bleiben + müllcode zum laden und speichern von templates (lol leveledit.d); vllt. savegames/netzwerklevels immer als komplette bitmap speichern?; danach kann glevel.d das zeug aus level.d direkt verwenden und ist weniger hackig
- hashcheck für savegames und insbesondere netzwerklevels
+ beliebige game objekte in vorgenerierten leveln (ähnlich minen, aber vom leveldesigner platziert, beispiel: feste levelränder als objekte)
- Objekt-/Brückenplatzierung überarbeiten (Decke, Wand links/rechts etc.)
- Objekte und Brücken sind jede Runde anders platziert


== Netzwerk ==
[- Teams: Waffenset-Zuordnung, Lebenspunkte vom Server behandeln bzw. überprüfen,
         nicht allein den Client entscheiden lassen (Fairness)]
+ Server im Verbindungs-Dialog pingen bzw. mehr Informationen anzeigen
- Replays überprüfen/abstellen
+ Savegames
- Fix für spielbeeinflussende Befehle (z.B. slowdown), die mom. keine Timestamps haben
+ Ready-Check zum Spielstart
*** Interpolation/Dead reckoning/Lag compensation/sowas in die Richtung, muhahar (siehe Deadlock)
*** determinismus garantieren (benutzung der FPU ist ein problem, da nicht alle plattformen die gleiche präzission für floating point haben), z.b. fixed point zahlen benutzen, oder regelmäßig zustand der clienten wieder synchronisieren
- einfache erkennung von clients mit abweichender simulation (periodisch einen einfachen engine-hash berechnen und an den server schicken)
* Client-Netzwerkcode in Thread verlagern (Performance/genaue Ping-Werte)

== nicht wirklich wichtig ==
[- userdaten (mergen von konfigfiles)]
- locales: übersetzungen vergleichen (z.b. de mit en -> fehlende einträge finden)
- task spezifische commandos/hotkeys (ähnlich wie in loadsafe.d)
   (und den gräuslichen hack in commandline.d entfernen)
- funktionalität von sky.d durch particles.d ersetzen
- GameConfig code säubern (absurde ansammlung von ConfigNodes)
! besser methode zum auslesen von confignodes (insbesondere mit fehlerbehandlung, so dass ungültige werte nicht still ignoriert werden, beliebige datentypen, user warnen über unbenutzte einträge)
- configfile.d so ändern, dass datentypen schon in den nodes/in der syntax deklariert werden?