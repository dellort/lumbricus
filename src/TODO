! PITA (hacks entfernen/neuschreiben, kompliziert, wenig gewinn),
- Fix/Change,
+ kleines Feature,
* großes, langfristiges Feature,
*** völlig unmöglich,
[] wurde versucht, aber nur kompromiss wurde implementiert oder es hat nicht geklappt
$ sollte behoben sein / works for me (muss getestet werden)

== Sonstiges/Minor ==
+ editor/debug modus: spielzeit läuft nicht ab, untersuchung/platzierung von game objekten
+ weapon cooldown: wenn feuer-taste nichts tut, rauchwolke vom wurm aufsteigen lassen?
- animation für kranke würmer benutzen
- lua console:
    $ the Lua console stuff was never meant to be deterministic, and commands like "pickMakeActive()" use the GUI anyway
    - the in-game lua one can't do anything when the game is paused

== bekannte, lösbare Bugs ==
- am seil hängen, mit landschaft kolidieren => seil wird kürzer (commit 1163 ???)
$ wurm, der im napalm kocht, zeigt animation für unkontrollierten/schnellen fall an (sollte sein: rutsch animation)
  ^ manchmal wird immernoch eine chaotische "schneller fall" animation angezeigt, 
- Schwarzes Loch kann ertrinkende Würmer aus dem Wasser saugen; Ideen:
  1. Würmern erlauben, das Wasser wieder zu verlassen (und Zustand korrigieren)
  2. unter Wasser keine Bewegung nach oben zulassen
  3. bei Verlassen des Wasser Objekt einfach löschen
[- Bohrer/Lötlampe stoßen Würmer nicht weg]
    notdürftig implementiert, muss verbessert werden (mehr impuls, weniger schaden?)
$ Kisten erscheinen manchmal in der Landschaft oder an komischen Stellen
- wenn von einer waffe nur noch ein schuss übrig ist, wird die feuer-animation nicht mehr gezeigt, weil die spielelogik die waffe verschwinden lässt
  und: feuer animation kann verfrüht durch selektion anderer waffe abgebrochen werden (z.B. axt)
  Beispiel: Baseballschläger
    ^ nur, wenn die eig. waffe direkt nach dem feuern inaktiv wird... dann kann die feuer-animation später einfach abgebrochen werden
    ^ auch während der "prepare" animation
  Ursache: der code in worm.d erzwingt die animation nur, wenn der shooter aktiv ist; beim baseballschläger ist der shooter aber nur einen kurzen bruchteil aktiv, der rest ist nur "graphik" und ist unbeständig
  ist nur noch ein schuss übrig, wird die waffe nach beendung des shooters abselektiert, und dadurch die verbleibenden animationen abgebrochen
- Konsolen-Katastrophe entfernen (es gibt jetzt 3.. nein 2 Konsolen die alle was anderes machen)
- log nachrichten sollten durch ein globales widget angezeigt werden; z.zt. werden extra umstände gemacht, damit sie in GameFrame/mChatbox angezeigt werden
- während die feuer-animation abgespielt wird, sollte der wurm keine eingabe akzeptieren (z.b. shotgun => kein waffen-winkel verstellen) (abhängig von der waffe; bei anderen waffen ist es vorgesehen, dass z.b. der waffen-winkel während des feuerns geändert werden kann)
  ebenso wenn die "prepare"-animation abgespielt wird
- wenn datenverzeichnis nicht gefunden wird, bessere fehlermeldung ausgeben
- Napalm verursacht zuviel Schaden (durch neuen Explosionscode; wenn man einfach den
  Schaden reduziert werden die Löcher zu klein)
  Genauso: Minigun macht zuviel Schaden (bis 350 für die volle Ladung)
- Waffenbugs von r1164 (grmbl):
  $ Bazooka etc. am Zugende (Zeit 0) wird zwar aufgezogen aber nicht abgefeuert
    ^ nur gepatcht, hätte die bazooka eine "prepare" animation, würde es immernoch nicht funktionieren
  - Beamen am Zugende wird abgebrochen
  - J zum Jetpack aktivieren muss zweimal gedrückt werden, wenn man vorher eine andere Waffe auswählt
  $ Einige Waffen werden unnötigerweise nach dem Feuern sofort weggesteckt (z.B. Bogen, Seil)
    ^ ich dachte, das ist so per design; wie soll es sonst funktionieren?
    ^ bei wwp wird erst die wegsteckanimation und dann wieder die ziehanimation gespielt (waffe bleibt ausgewählt), z.B. Bogen
  $ blowtorch: falsches zielkreuz während des bohrens

== bekannte, unlösbare Bugs ==
- physik mehr wie wwp (z.b. wenn ein wurm nach unten fällt, bleibt er in wwp im boden stecken, zieht sich raus, und bleibt sitzen, während er in lumbricus wie ein gummiball abprallt)
- Projektil fliegt durch wenige Pixel dicke Landschaft, wenn der Wurm beim Feuern direkt davorsteht
- wurm laufen auf objekten (statt landschaft) ist kaputt
*** multithreading-unsinn in cmdserver_gui.d ist unsicher
    ^ cmdserver_gui eliminieren und nur standalone-server? oder was?
    ^ wäre eine möglichkeit, das problem ganz loszuwerden; ansonsten siehe kommentare in cmdserver_gui.d
- physik: "kleben" verbessern, v.a. sollte es möglich sein, dass würmer über andere würmer laufen und wurmtürme gebaut werden können (wie in WWP)
  idee: features aus rigid-body physic engines klauen und box stacking möglich machen (z.b. chipmunk); dazu bräuchte man aber trotzdem noch "kleben", was chipmunk nicht hat
  idee fürs "kleben":
  - objekt bewegt sich nicht mehr, wenn die geschwindigkeit 0 ist und alle kräfte, die auf das objekt wirken sich aufheben
  - alle kräfte = 0 ist gleichbedeutend mit es gibt keine geschwindigkeitsänderung
  - geschwindigkeitsänderung ist alles, was auf die geschwindigkeit addiert wird (gravitation, kräfte, impulse durch constraints und kollisionen)
  - kollisionen mit dem boden lösen impulse aus, die die gravitation aufheben (in der theorie), eventuell muss man mit speziellem code nachhelfen um die gegenkraft permanent aufrechtzuerhalten, oder z.b. leichtes eindringen der objekte in den boden erlauben
  (bin mit meinen amateurhaften versuchen soweit gescheitert)

== Performance Bugs, "Dinge die nicht so weiter gehen können", etc. ==
- GUI zeichnet hintergrund bild selbst wenn komplett verdeckt (z.b. während des spiels) (ähnliches problem gibt es mit löschung des hintergrund: z.b. fensterhintergrund sollte nicht gelöscht werden, wenn das spiel das eh tut, vor allem im vollbildmodus; dazu gibt es zur zeit ekligen spezialcode)
- in broadcast.d: SocketSet allokiert speicher, der der GC überlassen wird (entweder bug report für Tango um eine free() methode hinzuzufügen, oder: blockierender thread?)

== GUI (allgemeine Features) ==
+ key bindings editor
[*** GUI enthässlichen]
*** GUI durch was einfacheres ersetzen

== GUI spielspezifisch (Dialoge) ==
* Netzwerk-GUI (Spielerliste, Scores, Chat, Ping/Lag/Warte-auf-Server)
+ Waffenset-Editor (mit Kisten-Waffen)
+ Singleplayer-Spiel-Dialog erweitern (Optionen, mehr Team-Einstellungen, Templates laden/speichern)
[+ Netzwerk-Server-erstell GUI (ähnlich Singleplayer, evtl. verbinden mit s.o.)]
[+ Optionsmenü (Sprache, Video, Sound etc.)]
+ Locale-Tool ("missing id" finden, Locales vergleichen, aktuelle Locale neu laden)
+ im-spiel-dialog, der folgende aktionen anbietet: pause, spiel verlassen, speichern, demo aufnahmen, key bindings verändern, obiges optionsmenü


== Spiellogik/Gameengine ==
- timing des lebenspunktcountdowns und der teamanzeige abstimmen:
    - temporäres "einfrieren" des spiels durch spielmodus, wenn etwas "passiert" ist (timer wird gestoppt, derzeitiger spieler muss warten bis der spielmodus die kontrolle wieder freigibt)
    - countdown der lebenspunkte
    - sich sprengende würmer
    - animation der teamanzeige
    - nachricht, die den tod/die feigheit eines wurmers mitteilt
* physik: box stacking
  (zusätzliche ideen: bewegende platformen, jump pads, wurmlöcher)
[- statt aktive Teams aktive TeamMembers]
+ Spiel-Statistiken, insb. Team- und Wurm-bezogene
    ^ die gibt es doch schon; müssen nur angezeigt werden
+ Mehr Powerup-Kisten (Niedrige Schwerkraft etc.)
+ Vergiftete Würmer (nach Atomangriff/Sudden death oder Stinktiertreffer)
*** KI

== Spiel-Anzeige (Grafiken, Präsentation) ==
+ Partikel-Effekt für Explosionen, Wurm-nimmt-Schaden, kleine Explosionen (z.B. Minigun-Einschläge)
+ Partikel, die auf Sprite-Ereignisse reagieren (Kollision, Rutschen, Kontakt mit Wasser etc.)
- mehrere partikel-emitter an verschiedenen stellen erlauben (am besten in Sequence einbauen), statt ein emitter, der in der mitte des objekts emitiert
+ Partikel-Modifikations-Effekte (Explosion, Schwarzes Loch) in Spiel-Engine integrieren
+ Mehr "stub" gpl daten (Fragezeichen ersetzen, z.B. Dummy-Projektile die von der Engine gedreht werden)
*** gpl daten (vollständig)
[+ Kamera:
    - grundzustand: den aktiven, kontrollierten wurm fokusieren (kermacode durchsucht team-liste)
    - kameracode setzt einen callback, der jedesmal aufgerufen wird, wenn ein neues sprite erzeugt wird (man kann herausfinden, welches team das sprite "abgeschossen" hat)
    - neue waffen-sprites vom kontrollierten wurm werden sofort fokusiert
      wenn das sprite stirbt, wird der fokus nach kurzer zeit wieder auf einen wurm gesetzt
    - bewegt der user die kamera weg, wird der fokus auf waffen-sprites dauerhaft aufgehoben?
    - sonderbehandlung kisten: fokus beim erscheinen immer sofort setzen
      sobald kiste steht, fokus sofort wieder auf das vorherige objekt zurück
    ...]

== Waffen ==
+ Superwaffen (Briefbomben)
+ Tierwaffen (Maulwurf, Maulwurfsangriff, Stinktier mit vergifteten Würmern)
+ Lokale-Suche-Waffen (Taube, Zauberkugel)
+ Bungee
+ Nahkampfwaffen (Drachenball, Firepunch, Kamikaze, Kamikaze-Bomber)

- Napalm verbessern (Ruckeln verhindern, Würmer mehr wegstoßen, vll. etwas "klebriger" machen)
- Molotov-Cocktail brennt über mehrere Züge
- Minenverzögerung sollte zufällig sein

! Steuerung entrümpeln, unabhängig von Würmern machen (worm.d)
    - statt versuchen, wcontrol.d von worm.d unabhängig zu machen, lieber den rest des spiels von wcontrol.d unabhängig machen
    - alles im spiel sollte abstrakte tastenkombinationen registrieren können ("abstrakt" weil sie user-konfigurierbar sein sollen und über netzwerk funktionieren müssen)
    - manche davon sind nur zeitweise aktiv (nämlich würmer)
    - der rest (input.d, wcontrol.d, worm.d) kann das einfach benutzen und muss nicht weiter enthackt werden (oh alptraum)
    - dann braucht man noch eine kleine schnittstelle zwischen wcontrol.d und control.d und manchen waffen (beamen, bohrer...)


== level generator ==
! generator.d: möglicherweise level einfach als lua generator skript speichern?
+ beliebige game objekte in vorgenerierten leveln (ähnlich minen, aber vom leveldesigner platziert, beispiel: feste levelränder als objekte)
- Objekt-/Brückenplatzierung überarbeiten (Decke, Wand links/rechts etc.)
- Objekte und Brücken sind jede Runde anders platziert


== Netzwerk ==
[- Teams: Waffenset-Zuordnung, Lebenspunkte vom Server behandeln bzw. überprüfen,
         nicht allein den Client entscheiden lassen (Fairness)]
+ Server im Verbindungs-Dialog pingen bzw. mehr Informationen anzeigen
- Replays überprüfen/abstellen
- Fix für spielbeeinflussende Befehle (z.B. slowdown), die mom. keine Timestamps haben
+ Ready-Check zum Spielstart
*** Interpolation/Dead reckoning/Lag compensation/sowas in die Richtung, muhahar (siehe Deadlock)
*** determinismus garantieren (benutzung der FPU ist ein problem, da nicht alle plattformen die gleiche präzission für floating point haben), z.b. fixed point zahlen benutzen, oder regelmäßig zustand der clienten wieder synchronisieren
- einfache erkennung von clients mit abweichender simulation (periodisch einen einfachen engine-hash berechnen und an den server schicken)
* Client-Netzwerkcode in Thread verlagern (Performance/genaue Ping-Werte)
- chat innerhalb des spieles (es gibt schon GUI-teile dafür in gameframe.d, ausserdem hat die lobby einen [funktionierenden?] chat)

== nicht wirklich wichtig ==
- locales: übersetzungen vergleichen (z.b. de mit en -> fehlende einträge finden)
- task spezifische commandos/hotkeys (ähnlich wie in loadsafe.d)
   (und den gräuslichen hack in commandline.d entfernen)
- funktionalität von sky.d durch particles.d ersetzen
- GameConfig code säubern (absurde ansammlung von ConfigNodes)
- userverzeichnis im VFS unter /user statt / mounten => shadowing von beliebigen dateien im datenverzeichnis verhindern (obwohl das mal als feature gedacht war)
+ datenverzeichnis per kommandozeile setzbar machen
+ server ohne GUI per kommandozeile startbar machen
