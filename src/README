This is Lumbricus Terrestris. Sorry, it's at a very early alpha/beta state,
it is not really ready yet.

Slogan: "Instead of following the principle KISS, we bring you THIS!"

WARNING: Currently needs original worms files to run at all. Probably it only
works with the version of WWP which was available to us. You need to compile and
run the program "extractdata" and place the resulting files into the data/data2
directory.

Actually, Lumbricus is completely independent from WWP and can't read WWP
datafiles (which is why there's an extra converter).
At some time we'll make sure it works just with the data from this SVN.
We would need a graphic artists to produce a free, nice-looking game.

The code is written in the D Programming Language, see:
http://www.digitalmars.com/d/1.0/

There's also a little info on our project page:
https://gna.org/projects/lumbricus

Building it...

- A D compiler for D 1.x is required, pick up the latest version of dmd or gdc:
  -> http://www.digitalmars.com/d/download.html
  D 2.x will _not_ work, it is a different language from D 1.x!

  DMD should work under x86 Windows and Linux.
  GDC supports more arches, but at least for amd64 it is slightly broken and
  won't work with this code (format()-ing struct arguments isn't implemented).

- DSSS is the build program we use
  -> http://www.dsource.org/projects/dsss

- Tango, the non-standard standard library. Well I don't really know why we
  switched from Phobos to Tango. Maybe for maximum comedy.
  Needs at least Tango 0.99.8.
  -> http://www.dsource.org/projects/tango/

- Derelict, which is a bunch of wrappers for C libraries, especially SDL
  -> http://dsource.org/projects/derelict
  
  With all your build tools (DMD/DSSS) and Tango set up correctly, you can
  install all required Derelict libraries automatically by running
    dsss net deps
  in the trunk/src directory. Don't worry about the bunch of error messages about
  missing files, this is how this tool works.

- When it's all correctly set up, go into the trunk/src/ dir and compile
  Lumbricus by executing this command on the commandline:
    dsss build
  And to build the WWP data converter:
    dsss build ../bin/extractdata
  The resulting binaries are put into trunk/bin/

Required libraries:
- Dynamic linked (.dll/.so):
  - SDL
  - SDL_image
  - Freetype
  - DevIL (openil.sf.net)
  - ENet (enet.bespin.org)
  - Zlib

  - FMod (optional)
  - SDL_mixer (optional)
  - OpenAL (optional)
  For Win32, all required .dll files can be found in <svn_root>/downloads/win32_dlls
- Static linked D libraries:
  - Derelict for the 3 SDL libraries
  - Tango (comes not with DMD)
The WWP data converter ("extractdata") also needs DevIL.

Using the WWP data converter:
  extractdata expects the Worms(TM) directory and an output
  dir as arguments, and converts the file to images/conf-files Lumbricus can
  understand. Call it like this:

   extractdata pathtowwp

  Note that this needs some additional data files from
    trunk/share/lumbricus/wimport
  The files are searched in <path_to_extractdata_binary>/../share/lumbricus/wimport,
  so if you leave your executable in the default output path you should be fine.

  The WWP datafiles just contain lists of compressed images/animations, which
  are obviously (?) only addressed by their index-number. So we had to create
  our own description file, which maps the animation index to a name. This is
  trunk/bin/tools/animations.txt. If your WWP datafiles are somehow different,
  the animation numbers in animations.txt may need to be changed.

  To inspect the WWP datafiles, you can unpack them with unworms (using
  extractdata is impractical, because it only converts the animations in
  animations.txt). Compile unworms with "dsss build ../bin/tools/unworms". You
  can call it on .dir, .bnk, .img and .spr files.
