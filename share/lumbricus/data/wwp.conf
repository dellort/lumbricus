//for using the original WWP graphics
//NOTE: normally, this would be distributed in the same directory as the actual
//      data directory (named "wwp"); they only are in different directories
//      because wwp/* is for data automatically generated by extractdata (= not
//      in svn).

require_resources {
    "wwp/mainspr.conf"
    "wwp/sounds.conf"
    "windmeter.conf"
    "wwp/icons.conf"
}

//specially handled by gfxset.d
water_path = "wwp/water"

resources {
    bitmaps {
        border_segment = "border_segment.png"
    }
    animations {
        star {
            type = "list"
            pattern = "star.png"
        }
    }
    music {
        //pick your own
        game = "music.ogg"
    }
}

//xxx maybe the theme should load this?
sky {
    //list of animation resources for the clouds
    clouds {
        "cloud1"
        "cloud2"
        "cloud3"
    }
    stars { "star" }
    enableStars = "false"
}

explosions {
    shockwave1 {
        "expl_outer_size1"
        "expl_outer_size2"
        "expl_outer_size3"
        "expl_outer_size4"
    }
    shockwave2 {
        "expl_inner_size1"
        "expl_inner_size2"
        "expl_inner_size3"
        "expl_inner_size4"
    }
    comictext {
        "expl_biff"
        "expl_poot"
        "expl_pow"
        "expl_foom"
    }
    smoke {
        "smoke_white_size1"
        "smoke_white_size2"
        "smoke_white_size3"
        "smoke_white_size4"
    }
    sizetreshold { "25" "100" "150" "200" }
}

//used to load the Sequence stuff, works similar to animations.txt
sequences {
    //each item is sequence

    s_worm {
        //each item is a sequence state
        //below, the "walk" state shows, how a simple sequence state type is
        //  used (type = "simple_animation"). this state type maps directly to
        //  an animation, using the animation's p1 for the sprite rotation.
        //the "stand" types shows a complex sequence state type. the type is
        //  indicated by the "type" node. the value of this node is used to find
        //  the loader, and the loader might do arbitrary things with the node.

        //for simple states with just an animation
        walk = "worm_walk"
        walk_blowtorch = "worm_walk_blowtorch"
        fly_fall = "worm_fall"
        fly_slide = "worm_slide"
        fly_roll = "worm_roll"
        fly_heavy = "worm_heavy_fly"
        jump_normal = "worm_jump"
        jump_backflip = "worm_jump_back"
        drown = "worm_drown"
        win = "worm_win"
        rope = "worm_rope"
        drill = "worm_usedrill"

        die = "worm_die"
        beaming = "worm_beaming"
        reverse_beaming = "worm_beaming_backwards"
        bounce_minor = "worm_wiggle1"
        bounce_major = "worm_wiggle2"
        jump_start = "worm_jump_enter"
        jump_to_fall = "worm_jump_to_fall"

        //stand is quite special, because it needs to select weapon animations
        stand {
            //loader type
            type = "wwp_weapon_select"

            //normal animation with no weapon selected
            animation = "worm_stand"

            //animations when a weapon is selected
            //WWP just works like this way: a worm is always a single animation,
            //  and the weapons are blended into the normal "stand" state
            //the job of the "wwp_worm_stand" thing is to select the correct
            //  animation based on the weapon
            weapons {
                //map weapon names to animations
                //  weapon_name = "animation_resource"
                //there are various animation states with weapons, and one can
                //  use this to select animations:
                //  holy = "worm_holy_+"
                //it will replace '+' by get, hold and fire; if hold or fire are
                //  not found, these animations are left out; if get is not
                //  found, worm_no_weapon_get is used ("get" from "#unknown")
                //animation types:
                //  get: played once when the weapon is selected
                //  hold: played after get is finished (only reason for this is
                //      because get usually can't show arbitrary weapon angles,
                //      but hold can)
                // [unget: doesn't exist, instead get is played backwards]
                //  fire: played on repeat when firing (if firing has no time
                //      duration (baseball bat?), the animation is played once)
                // [fire_end: when firing is finished; this will be played
                //      instead of unget, if it exists]
                //xxx: what else should be possible?

/+
                //lololo macro processing
                //turn each entry % from stuff into:
                //  weapon_% = "worm_%_+"
                + "!inline:lua" = <#:
                    local stuff = {
                        "atomtest",
                        "beamer",
                        "dynamite",
                        "airstrike",
                        "mingvase",
                        "mine",
                        "granny",
                        "sally_army",
                        "cow",
                        "sheep",
                        "prod",
                        "axe",
                        "drill",

                        "holy",
                        "banana",
                        "bazooka",
                        "cluster",
                        "grenade",
                        "homing",
                        "sheeplauncher",
                        "minigun",
                        "molotov",
                        "pistol",
                        "shotgun",
                        "uzi",
                        "mortar",
                        "rope",
                        "flamethrower",
                        "skipturn",
                        "surrender",
                        "baseball",
                        "blowtorch",

                        -- actually unused
                        "helmet",
                        "skunk",
                        "mole",
                        "headband",
                        "freezer",
                        "hat",
                    }

                    for i, x in ipairs(stuff) do
                        emit_text("+ \"weapon_" .. x .. "\" = \"worm_" .. x .. "_+\"")
                    end
                #>
+/

                //-------------------
                weapon_atomtest = "worm_atomtest_+"
                weapon_beamer = "worm_beamer_+"
                weapon_dynamite = "worm_dynamite_+"
                weapon_airstrike = "worm_airstrike_+"
                weapon_mingvase = "worm_mingvase_+"
                weapon_mine = "worm_mine_+"
                weapon_granny = "worm_granny_+"
                weapon_sally_army = "worm_sally_army_+"
                weapon_cow = "worm_cow_+"
                weapon_sheep = "worm_sheep_+"
                weapon_prod = "worm_prod_+"
                weapon_axe = "worm_axe_+"
                weapon_drill = "worm_drill_+"
                weapon_holy = "worm_holy_+"
                weapon_banana = "worm_banana_+"
                weapon_bazooka = "worm_bazooka_+"
                weapon_cluster = "worm_cluster_+"
                weapon_grenade = "worm_grenade_+"
                weapon_homing = "worm_homing_+"
                weapon_sheeplauncher = "worm_sheeplauncher_+"
                weapon_minigun = "worm_minigun_+"
                weapon_molotov = "worm_molotov_+"
                weapon_pistol = "worm_pistol_+"
                weapon_shotgun = "worm_shotgun_+"
                weapon_uzi = "worm_uzi_+"
                weapon_mortar = "worm_mortar_+"
                weapon_rope = "worm_rope_+"
                weapon_flamethrower = "worm_flamethrower_+"
                weapon_skipturn = "worm_skipturn_+"
                weapon_surrender = "worm_surrender_+"
                weapon_baseball = "worm_baseball_+"
                weapon_blowtorch = "worm_blowtorch_+"
                weapon_helmet = "worm_helmet_+"
                weapon_skunk = "worm_skunk_+"
                weapon_mole = "worm_mole_+"
                weapon_headband = "worm_headband_+"
                weapon_freezer = "worm_freezer_+"
                weapon_hat = "worm_hat_+"
                //-------------------

                //special name for weapons that couldn't be found in this list
                + "#unknown" = "worm_no_weapon_+"
            }

            //purely graphics based idle animations
            //wait time for idle animation
            idle_wait = "7.5s:30s"
            //list of idle animations (random pick)
            //xxx: need to sort out idle animations; maybe some animations also
            //  depend from the "mood" of the worm, or whatever
            idle_animations {
                "worm_apple"
                "worm_scratch"
                "worm_confused"
                //"worm_sniff"  //this is for ill worms and doesn't fit to normal sit animation
                "worm_look2"
                "worm_mustache"
                "worm_pout"
                "worm_blink_down"
                "worm_blink_up"
                "worm_cool"
                "worm_look_up"
                "worm_look1"
                "worm_look3"
                "worm_wtf"
                "worm_blink_back"
                "worm_swearing"
                "worm_blink"
            }
        }

        //generates a single state with the given name
        jetpack {
            type = "wwp_jetpack"

            normal = "worm_jet"
            enter = "worm_jetpack_enter"
            turn = "worm_jet_turn"
            flame_x = "worm_jet_ex_h"
            flame_y = "worm_jet_ex_v"
        }

        parachute {
            type = "wwp_parachute"

            normal = "worm_parachute_fly"
            enter = "worm_parachute_enter"
            leave = "worm_parachute_sitdown"
        }

    }

    s_crate_weapon {
        normal = "crate1"
        fly = "crate1_fly"
        drown = "crate1_drown"
        beam = "crate1_beam"
    }

    s_crate_med {
        normal = "crate2"
        fly = "crate2_fly"
        drown = "crate2_drown"
        beam = "crate2_beam"
    }

    s_crate_tool {
        normal = "crate3"
        fly = "crate3_fly"
        drown = "crate3_drown"
        beam = "crate3_beam"
    }

    s_mine {
        normal = "mine"
        flashing = "mine_flashing"
        drown = "mine_drown"
    }

    s_barrel {
        //goes white with damage
        //p2 of the animation is connected with the sprite health point value
        normal {
            type = "simple_animation"
            wire_p2_to_damage = "true"
            animation = "barrel"
        }

        //under water
        drown = "barrel_drown"
    }

    //-------------------
    s_holy {
        normal = "holy_fly"
        drown = "holy_drown"
    }
    s_banana {
        normal = "banana_fly"
        drown = "banana_drown"
    }
    s_bazooka {
        normal = "bazooka_fly"
        drown = "bazooka_drown"
    }
    s_clustershard {
        normal = "clustershard"
        drown = "clustershard_drown"
    }
    s_cluster {
        normal = "cluster_fly"
        drown = "cluster_drown"
    }
    s_dynamite {
        normal = "dynamite"
        drown = "dynamite_drown"
    }
    s_esel {
        normal = "esel"
        drown = "esel_drown"
    }
    s_grenade {
        normal = "grenade_fly"
        drown = "grenade_drown"
    }
    s_mingvase {
        normal = "mingvase"
        drown = "mingvase_drown"
    }
    s_mingshard1 {
        normal = "mingshard1"
        drown = "mingshard1_drown"
    }
    s_mingshard2 {
        normal = "mingshard2"
        drown = "mingshard2_drown"
    }
    s_mingshard3 {
        normal = "mingshard3"
        drown = "mingshard3_drown"
    }
    s_molotov {
        normal = "molotov_fly"
        drown = "molotov_drown"
    }
    s_mortar {
        normal = "mortar_fly"
        drown = "mortar_drown"
    }
    s_granny {
        normal = "granny"
        drown = "granny_drown"
    }
    s_sally_army {
        normal = "sally_army"
        drown = "sally_army_drown"
    }
    s_sallyshard {
        normal = "sallyshard"
        drown = "sallyshard_drown"
    }
    s_cow {
        normal = "cow1"
        drown = "cow_drown"
    }
    s_airstrike {
        normal = "airstrike_fly"
        drown = "airstrike_drown"
    }
    s_sheepstrike {
        normal = "sheepstrike_burning_fly"
        drown = "sheepstrike_drown"
    }
    s_carpetstrike {
        normal = "carpetstrike_fly"
        drown = "carpetstrike_drown"
    }
    s_meteor {
        normal = "meteor_fly"
        drown = "meteor_drown"
    }
    //NOTE: the loader code checks automatically how many gravestones there are
    s_grave0 {
        normal = "grave0"
        drown = "grave0_drown"
    }
    s_grave1 {
        normal = "grave0"
        drown = "grave0_drown"
    }
    s_grave2 {
        normal = "grave0"
        drown = "grave0_drown"
    }
    s_grave3 {
        normal = "grave0"
        drown = "grave0_drown"
    }
    s_grave4 {
        normal = "grave0"
        drown = "grave4_drown"
    }
    s_grave5 {
        normal = "grave5"
        drown = "grave5_drown"
    }
    //-------------------


    s_mbbomb {
        normal = "mbbomb_fly"
        drown = "mbbomb_drown"
    }
    s_sheep {
        normal = "sheep2"
        helmet = "sheep1" //unused?
        drown = "sheep_drown"
        super_red = "supersheep_red"
        super_blue = "supersheep_blue"
        super_blue_underwater = "supersheep_blue_underwater"
    }

    s_homing {
        inactive = "homing_inactive_fly"
        active = "homing_active_fly"
        active_underwater = "homing_active_underwater"
        drown = "homing_inactive_drown"
    }


    s_napalm {
        normal {
            type = "wwp_napalm"
            fall = "napalm_fall"
            fly = "napalm_fly"
        }
    }

    //dummy for invisible sprites
    s_invisible {
    }
}

