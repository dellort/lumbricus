
gravity = "600"

//in load-order
scripts {
    "events.lua"
    "timer.lua"
    "gameutils.lua"
}

collisions {
    //explanation about the collision stuff
    //there's a matrix that says for each pair of collision types if they can
    //  collide - the "hit"-sections modifies this matrix
    //a collision type also can be the parent of several "sub classes"; all
    //  things that collide with the parent class collide with the sub classes
    //  as well (but not the other way around)
    //e.g. there's the special collision type "root", which is the root parent
    //  of all existing collision types (like Object in most sane programming
    //  languages)

    //collision types are defined here, with the parent class as value
    //  e.g. newtype = "parent_type"
    //no forward references or redefinitions allowed
    classes {
        none = "root"
        always = "root"

        object = "root"
        ground = "root"
        water_surface = "root"
        waterobj = "root"
        levelobject = "object"
        player = "object"
        water = "root"
    }

    //define what collides with what
    //
    //for each entry, the left-side object collides with the right-side ones
    //with a="b", a collides with b (this is symmetric, b also collides with a)
    //
    //there also can be one than more collision type in the value part:
    //e.g. a = "b c d" means (a, b), (a, c), and (a, d) are pairs of objects
    //which sollide with each other, but e.g. (b, c) don't
    //needed at least because names can't be more than one time in a ConfigNode
    //
    //if one of these objects is a super-class, all sub-classes collide as well
    //so if a is the superclass of c, and b the superclass of d,
    // a="b" means that (a, b), (c, b), (c, d) and (a, d) collide
    hit {
        always = "root"

        ground = "object"
        water = "root"  //xxx water collides with EVERYTHING
        levelobject = "levelobject"
    }
}
