Index: src/link.c
===================================================================
--- src/link.c	(revision 388)
+++ src/link.c	(working copy)
@@ -87,11 +87,7 @@
 	    cmdbuf.writeByte('+');
 	p = (char *)global.params.objfiles->data[i];
 	char *ext = FileName::ext(p);
-	if (ext)
-	    // Write name sans extension
-	    writeFilename(&cmdbuf, p, ext - p - 1);
-	else
-	    writeFilename(&cmdbuf, p);
+	writeFilename(&cmdbuf, p);
     }
     cmdbuf.writeByte(',');
     if (global.params.exefile)
Index: src/mars.c
===================================================================
--- src/mars.c	(revision 388)
+++ src/mars.c	(working copy)
@@ -267,6 +267,7 @@
   -odobjdir      write object & library files to directory objdir\n\
   -offilename	 name output file to filename\n\
   -op            do not strip paths from source file\n\
+  -oq            use fully qualified module name for object filenames\n\
   -profile	 profile runtime performance of generated code\n\
   -quiet         suppress unnecessary messages\n\
   -release	 compile release version\n\
@@ -474,6 +475,12 @@
 			global.params.preservePaths = 1;
 			break;
 
+                    case 'q':
+                        if (p[3])
+                            goto Lerror;
+                        global.params.packagePaths = 1;
+                        break;
+
 		    case 0:
 			error("-o no longer supported, use -of or -od");
 			break;
@@ -887,7 +894,6 @@
     // Create Modules
     Array modules;
     modules.reserve(files.dim);
-    int firstmodule = 1;
     for (i = 0; i < files.dim; i++)
     {
 	char *ext;
@@ -1004,11 +1010,6 @@
 	Identifier *id = new Identifier(name, 0);
 	m = new Module((char *) files.data[i], id, global.params.doDocComments, global.params.doHdrGeneration);
 	modules.push(m);
-
-	if (firstmodule)
-	{   global.params.objfiles->push(m->objfile->name->str);
-	    firstmodule = 0;
-	}
     }
 
 #if WINDOWS_SEH
@@ -1037,6 +1038,7 @@
 
     // Parse files
     int anydocfiles = 0;
+    int firstmodule = 1;
     for (i = 0; i < modules.dim; i++)
     {
 	m = (Module *)modules.data[i];
@@ -1045,8 +1047,6 @@
 	if (!Module::rootModule)
 	    Module::rootModule = m;
 	m->importedFrom = m;
-	if (!global.params.oneobj || i == 0 || m->isDocFile)
-	    m->deleteObjFile();
 #if ASYNCREAD
 	if (aw->read(i))
 	{
@@ -1054,6 +1054,9 @@
 	}
 #endif
 	m->parse();
+        m->prepareObjfile();
+        if (!global.params.oneobj || i == 0 || m->isDocFile)
+            m->deleteObjFile();
 	if (m->isDocFile)
 	{
 	    anydocfiles = 1;
@@ -1075,7 +1078,12 @@
 
 	    if (global.params.objfiles->dim == 0)
 		global.params.link = 0;
-	}
+        }
+
+        if (firstmodule)
+        {   global.params.objfiles->push(m->objfile->name->str);
+            firstmodule = 0;
+        }
     }
 #if ASYNCREAD
     AsyncRead::dispose(aw);
Index: src/mars.h
===================================================================
--- src/mars.h	(revision 388)
+++ src/mars.h	(working copy)
@@ -148,6 +148,7 @@
     char useInline;	// inline expand functions
     char release;	// build release version
     char preservePaths;	// !=0 means don't strip path from source file
+    char packagePaths;  // !=0 means use the fully qualified module name as object file output filename
     char warnings;	// 0: enable warnings
 			// 1: warnings as errors
 			// 2: informational warnings (no errors)
Index: src/module.c
===================================================================
--- src/module.c	(revision 388)
+++ src/module.c	(working copy)
@@ -64,11 +64,10 @@
     FileName *srcfilename;
     FileName *cfilename;
     FileName *hfilename;
-    FileName *objfilename;
-    FileName *symfilename;
 
 //    printf("Module::Module(filename = '%s', ident = '%s')\n", filename, ident->toChars());
     this->arg = filename;
+    orig_filename = filename;
     md = NULL;
     errors = 0;
     numlines = 0;
@@ -129,37 +128,52 @@
 	}
     }
 
+    if (doDocComment)
+    {
+        setDocfile();
+    }
+
+    if (doHdrGen)
+    {
+        setHdrfile();
+    }
+
+    srcfile = new File(srcfilename);
+}
+
+void Module::prepareObjfile()
+{
+    char *filename = orig_filename;
+    FileName *objfilename;
+    FileName *symfilename;
     char *argobj;
     if (global.params.objname)
-	argobj = global.params.objname;
+        argobj = global.params.objname;
     else if (global.params.preservePaths)
-	argobj = filename;
-    else
-	argobj = FileName::name(filename);
+        argobj = filename;
+    else if (global.params.packagePaths) {
+        argobj = (char*)toPrettyChars();
+        //FileName::forceExt will think the last part of the package path is an extension
+        //argobj = argobj ~ '.' ~ global.obj_ext;
+        char* tmp = (char*)calloc(1, strlen(argobj) + strlen(global.obj_ext) + 2);
+        memcpy(tmp, argobj, strlen(argobj));
+        tmp[strlen(argobj)] = '.';
+        memcpy(tmp + strlen(argobj) + 1, global.obj_ext, strlen(global.obj_ext));
+        argobj = tmp;
+    } else
+        argobj = FileName::name(filename);
     if (!FileName::absolute(argobj))
     {
-	argobj = FileName::combine(global.params.objdir, argobj);
+        argobj = FileName::combine(global.params.objdir, argobj);
     }
 
     if (global.params.objname)
-	objfilename = new FileName(argobj, 0);
+        objfilename = new FileName(argobj, 0);
     else
-	objfilename = FileName::forceExt(argobj, global.obj_ext);
+        objfilename = FileName::forceExt(argobj, global.obj_ext);
 
     symfilename = FileName::forceExt(filename, global.sym_ext);
 
-    srcfile = new File(srcfilename);
-
-    if (doDocComment)
-    {
-	setDocfile();
-    }
-
-    if (doHdrGen)
-    {
-	setHdrfile();
-    }
-
     objfile = new File(objfilename);
     symfile = new File(symfilename);
 }
@@ -222,7 +236,7 @@
 
 void Module::deleteObjFile()
 {
-    if (global.params.obj)
+    if (global.params.obj && objfile)
 	objfile->remove();
     if (docfile)
 	docfile->remove();
@@ -606,6 +620,9 @@
 	 */
 	if (!Lexer::isValidIdentifier(this->ident->toChars()))
 	    error("has non-identifier characters in filename, use module declaration instead");
+
+        if (global.params.packagePaths)
+            error("has no module declaration; this is not allowed when using option -oq");
     }
 
     // Update global list of modules
Index: src/module.h
===================================================================
--- src/module.h	(revision 388)
+++ src/module.h	(working copy)
@@ -58,6 +58,7 @@
 
 
     const char *arg;	// original argument name
+    char *orig_filename; //original filename (passed to Module ctor)
     ModuleDeclaration *md; // if !NULL, the contents of the ModuleDeclaration declaration
     File *srcfile;	// input source file
     File *objfile;	// output .obj file
@@ -111,6 +112,8 @@
     Module(char *arg, Identifier *ident, int doDocComment, int doHdrGen);
     ~Module();
 
+    void prepareObjfile();
+
     static Module *load(Loc loc, Array *packages, Identifier *ident);
 
     void toCBuffer(OutBuffer *buf, HdrGenState *hgs);
Index: src/mtype.c
===================================================================
--- src/mtype.c	(revision 388)
+++ src/mtype.c	(working copy)
@@ -3917,7 +3917,7 @@
 	if (ident == Id::max ||
 	    ident == Id::min ||
 	    ident == Id::init ||
-	    ident == Id::stringof ||
+	    //ident == Id::stringof ||
 	    !sym->memtype
 	   )
 	{
Index: src/win32.mak
===================================================================
--- src/win32.mak	(revision 388)
+++ src/win32.mak	(working copy)
@@ -9,7 +9,7 @@
 DMDSVN=\svnproj\dmd\branches\dmd-1.x\src
 SCROOT=$D\dm
 INCLUDE=$(SCROOT)\include
-CC=\dm\bin\dmc
+CC=dmc
 LIBNT=$(SCROOT)\lib
 SNN=$(SCROOT)\lib\snn
 DIR=\dmd1
