Index: src/import.c
===================================================================
--- src/import.c	(revision 388)
+++ src/import.c	(working copy)
@@ -105,6 +105,8 @@
 	mod = Module::load(loc, packages, id);
 	dst->insert(id, mod);		// id may be different from mod->ident,
 					// if so then insert alias
+	if (global.params.compileAll)
+	    global.allModules->push(mod);
 	if (!mod->importedFrom)
 	    mod->importedFrom = sc ? sc->module->importedFrom : Module::rootModule;
     }
Index: src/mars.c
===================================================================
--- src/mars.c	(revision 388)
+++ src/mars.c	(working copy)
@@ -235,6 +235,7 @@
 \n\
   files.d        D source files\n\
   @cmdfile       read arguments from cmdfile\n\
+  -a             include imported modules in compilation\n\
   -c             do not link\n\
   -cov           do code coverage analysis\n\
   -D             generate documentation\n\
@@ -576,6 +584,10 @@
 		    global.params.fileImppath = new Array();
 		global.params.fileImppath->push(p + 2);
 	    }
+	    else if (p[1] == 'a')
+	    {
+		global.params.compileAll = 1;
+	    }
 	    else if (memcmp(p + 1, "debug", 5) == 0 && p[6] != 'l')
 	    {
 		// Parse:
@@ -885,6 +897,7 @@
     }
 
     // Create Modules
+    global.allModules = new Array();
     Array modules;
     modules.reserve(files.dim);
     for (i = 0; i < files.dim; i++)
@@ -1120,6 +1134,13 @@
     if (global.errors)
        fatal();
 
+    for (i = 0; i < global.allModules->dim; i++)
+    {
+        m = (Module *)global.allModules->data[i];
+        if (!m->srcfile->name->equalsExt("di"))
+            modules.push(global.allModules->data[i]);
+    }
+
     // Do semantic analysis
     for (i = 0; i < modules.dim; i++)
     {
Index: src/mars.h
===================================================================
--- src/mars.h	(revision 388)
+++ src/mars.h	(working copy)
@@ -147,6 +147,7 @@
     char useUnitTests;	// generate unittest code
     char useInline;	// inline expand functions
     char release;	// build release version
+    char compileAll;    // compile all imported modules
     char preservePaths;	// !=0 means don't strip path from source file
     char packagePaths;  // !=0 means use the fully qualified module name as object file output filename
     char warnings;	// 0: enable warnings
@@ -232,6 +234,7 @@
     Array *filePath;	// Array of char*'s which form the file import lookup path
     int structalign;
     const char *version;
+    Array* allModules;
 
     Param params;
     unsigned errors;	// number of errors reported so far
